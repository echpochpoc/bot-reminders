from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from core import ADMIN_ID
from core.keyboards.keyboards import get_kb_yes_no

from db.models import Group
from db.queries.queries import insert_group


class GroupState(StatesGroup):
    title = State()
    description = State()
    end = State()


async def start_add_group(message: types.Message):
    if message.chat.id == int(ADMIN_ID):
        await message.answer('–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel\n'
                             '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã')
        await GroupState.title.set()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤, –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã')


async def get_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['title'] = message.text.title().strip()
    await message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã "{data["title"]}", —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
    await GroupState.next()


async def get_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text.strip()
    await message.answer(f'–ì—Ä—É–ø–ø–∞: {data["title"]}\n'
                         f'–û–ø–∏—Å–∞–Ω–∏–µ: {data["description"]}\n\n'
                         f'–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É?',
                         reply_markup=get_kb_yes_no())
    await GroupState.next()


async def end_add_group(message: types.Message, state: FSMContext):
    if message.text == '‚úÖ –î–∞':
        async with state.proxy() as data:
            group = Group(
                title=data['title'],
                description=data['description'])
        try:
            await insert_group(group)
            await message.answer('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, '
                                 '–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â–µ –æ–¥–Ω–æ–π –≤–≤–µ–¥–∏—Ç–µ /add_group',
                                 reply_markup=types.ReplyKeyboardRemove())
        except:
            await message.answer('–û–π, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                                 reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    elif message.text == 'üö´ –ù–µ—Ç':
        await message.answer('–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å–±—Ä–æ—à–µ–Ω',
                             reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    else:
        await message.answer('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É')


def register_handler(dp: Dispatcher):
    dp.register_message_handler(start_add_group, commands=['add_group'])
    dp.register_message_handler(get_title, state=GroupState.title)
    dp.register_message_handler(get_description, state=GroupState.description)
    dp.register_message_handler(end_add_group, state=GroupState.end)
