from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from core.filters.filters import UserIsRegistered
from core.keyboards.keyboards import get_kb_main_menu

from db.queries import queries
from db import models


async def start_handler(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –±–µ—Ç–∞ 1.0. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è. –ù–∞–∂–º–∏ —Å—é–¥–∞ -> /reg')


async def send_kb_main_menu(message: types.Message):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–∞ –∫—É–¥–∞-—Ç–æ –¥–µ–ª–∞—Å—å –∏ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞—Å—å
    """
    kb = get_kb_main_menu()
    await message.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞',
                         reply_markup=kb)


async def send_help(message: types.Message):
    await message.answer('–≠—Ç–æ –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞. –û–Ω —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. '
                         '–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ú–µ–Ω—é (—Ç—Ä–∏ –ø–æ–ª–æ—Å–æ—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è) –∏–ª–∏ –∂–µ –∏—Ö –º–æ–∂–Ω–æ '
                         '–≤—ã–±—Ä–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ (–ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏):\n\n'
                         '/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è)\n'
                         '/reminder - —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n'
                         '/send_users - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –≥—Ä—É–ø–ø\n'
                         '/send_groups - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
                         '/keyboard - —Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é\n\n'
                         '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –Ω–∞—Å—á–µ—Ç –±–æ—Ç–∞, –ø–∏—Å–∞—Ç—å @echpochpoc. \n\n'
                         'Create by –ï–≥–æ—Ä –ö–æ–ª–º–æ–≥–æ—Ä–æ–≤üåù')


async def cancel_handler(message: types.Message, state: FSMContext):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç state, –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏
    """
    current_state = await state.get_state()
    if current_state is None:
        return
    kb = get_kb_main_menu()
    await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞', reply_markup=kb)
    await state.finish()


async def send_profile(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user: models.User = await queries.select_user(message.chat.id)
    groups = await queries.select_groups_with_user(message.chat.id)
    text = f'–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n' \
           f'ID: {user.telegram_id}\n' \
           f'–§–ò–û: {user.fullname}\n' \
           f'–ü—Å–µ–≤–¥–æ–Ω–∏–º: {user.shortname}\n' \
           f'–ì—Ä—É–ø–ø—ã: {", ".join([group.title for group in groups])}'
    if user.photo is not None:
        await message.answer_photo(photo=user.photo, caption=text)
    else:
        await message.answer(text)


def register_handler(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=['start'])
    dp.register_message_handler(send_help, commands=['help'])
    dp.register_message_handler(send_help, Text(startswith='üÜò–ü–æ–º–æ—â—å'))
    dp.register_message_handler(send_kb_main_menu, commands=['keyboard'])
    dp.register_message_handler(cancel_handler, commands=['cancel'], state='*')
    dp.register_message_handler(send_profile, UserIsRegistered(), Text(startswith='üåù–ü—Ä–æ—Ñ–∏–ª—å'))
