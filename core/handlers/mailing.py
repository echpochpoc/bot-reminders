import datetime as dt
import re
import locale
import calendar
import sqlalchemy

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text

from core.filters.filters import UserIsRegistered
from core.keyboards import keyboards
from core.create_connect import bot

from db.queries import queries
from db import models


async def send_reminder_for_me(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    reminders = await queries.select_reminders_for_me(telegram_id=message.chat.id)
    if reminders:
        for reminder in reminders:
            msg_text = get_msg_text(reminder=reminder)
            kb = keyboards.get_inline_kb_reminder_done(reminder_id=reminder.id)
            await message.answer(f'üü•üü•üü•üü•üü•üü•\n{msg_text}', reply_markup=kb)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')


async def send_my_reminder(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    reminders = await queries.select_my_reminders(telegram_id=message.chat.id)
    if reminders:
        for reminder in reminders:
            text = await get_msg_with_reminder(reminder=reminder)
            kb = keyboards.get_inline_kb_reminder_delete(reminder_id=reminder.id)
            await message.answer(f'üü®üü®üü®üü®üü®üü®\n'
                                 f'{text}', reply_markup=kb)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π')


async def send_msg_creator_user_done_reminder(reminder_id: int, user_shortname: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á—Ç–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    """
    creator = await queries.select_creator(reminder_id=reminder_id)
    kb = keyboards.get_inline_kb_reminder_details(reminder_id)
    await bot.send_message(chat_id=creator.telegram_id,
                           text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_shortname} –≤—ã–ø–æ–ª–Ω–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ{reminder_id}",
                           reply_markup=kb)


async def done_reminder(call: types.CallbackQuery):
    """
    –î–µ–ª–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    """
    reminder_id = int(re.findall(r'\d+', call.data)[0])
    user = await queries.select_user(telegram_id=call.message.chat.id)
    try:
        await queries.update_reminder_status_to_done(reminder_id=reminder_id, user_id=user.id)
        await queries.check_reminder_for_completion(reminder_id=reminder_id)
        time = dt.datetime.now().strftime("%d.%m.%y %H:%M:%S")
        text = call.message.text.replace('üü•', 'üü©') + f'\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç: {time}'
        await call.message.edit_text(text)
        await send_msg_creator_user_done_reminder(reminder_id, user.shortname)
        await call.answer(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ{reminder_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
    except sqlalchemy.exc.NoResultFound:
        await call.message.edit_text(f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ{reminder_id} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–Ω–æ‚ùå')


async def detail_reminder(call: types.CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω—å—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
    """
    reminder_id = int(re.findall(r'\d+', call.data)[0])
    reminder = await queries.select_reminder(reminder_id)
    text = call.message.text + '\n' + get_msg_text(reminder=reminder)
    await call.message.edit_text(text=text)


async def delete_reminder(call: types.CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    rem_id = int(re.findall(r'\d+', call.data)[0])
    try:
        await queries.delete_reminder(rem_id)
    finally:
        pass
    await call.answer(text='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
    await call.message.delete()


async def send_reminder_scheduler() -> None:
    """
    –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –∏—â–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
    """
    reminders = await queries.select_reminder_for_send()
    for reminder in reminders:
        msg_text = get_msg_text(reminder)
        kb = keyboards.get_inline_kb_reminder_done(reminder_id=reminder.id)
        users = await queries.select_users_for_reminder(reminder_id=reminder.id)
        for user in users:
            await bot.send_message(chat_id=user.telegram_id,
                                   text=f'üü•üü•üü•üü•üü•üü•\n{msg_text}',
                                   reply_markup=kb)


def register_handler(dp: Dispatcher):
    dp.register_message_handler(send_my_reminder, UserIsRegistered(), Text(startswith='‚è∞–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
    dp.register_message_handler(send_reminder_for_me, UserIsRegistered(), Text(startswith='üì¨–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∞–º'))
    dp.register_callback_query_handler(done_reminder, Text(startswith='rem_done'))
    dp.register_callback_query_handler(delete_reminder, Text(startswith='rem_delete'))
    dp.register_callback_query_handler(detail_reminder, Text(startswith='rem_detail'))


def get_msg_text(reminder: models.Reminder) -> str:
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    """
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    times = ' '.join([t.strftime("%H:%M") for t in reminder.times])
    dates = '---'
    if reminder.dates:
        dates = ' '.join([d.strftime("%d.%m.%y") for d in reminder.dates])
    days_week = '---'
    if reminder.days_week:
        days_week = ' '.join([list(calendar.day_abbr)[dw] for dw in reminder.days_week])
    date_delete = '---'
    if reminder.date_delete:
        date_delete = reminder.date_delete.strftime("%d.%m.%y")
    msg_text = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Ññ{reminder.id}\n' \
               f'–¢–µ–∫—Å—Ç: {reminder.text}\n' \
               f'–í—Ä–µ–º—è: {times}\n' \
               f'–î–∞—Ç–∞: {dates}\n' \
               f'–î–Ω–∏ –Ω–µ–¥–µ–ª–∏: {days_week}\n' \
               f'–î–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∏—è: {date_delete}\n'
    return msg_text


def get_users_perform_reminder(users: list[(str, bool)]) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    """
    users_no_done = '\n–í—ã–ø–æ–ª–Ω—è—é—Ç‚è≥:\n'
    users_done = '–í—ã–ø–æ–ª–Ω–∏–ª–∏‚úÖ:\n'
    for user in users:
        if user[1] is True:
            users_done += user[0] + ' '
        else:
            users_no_done += user[0] + ' '
    text = f'{users_no_done}\n' \
           f'-------\n' \
           f'{users_done}'
    return text


async def get_msg_with_reminder(reminder: models.Reminder) -> str:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–µ–¥–∏–Ω—è–µ—Ç —á–∞—Å—Ç—å —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    """
    users = await queries.select_reminder_users_status(reminder_id=reminder.id)
    users_done_text = get_users_perform_reminder(users)
    reminder_text = get_msg_text(reminder=reminder)
    result = reminder_text + users_done_text
    return result
