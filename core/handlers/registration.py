from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from core.keyboards import get_data_on_keyboard, check_keyboard, get_kb_back_cancel, get_kb_back_skip_cancel
from core.keyboards.registration_kb import get_kb_groups


class Registration(StatesGroup):
    fullname = State()
    shortname = State()
    photo = State()
    groups = State()


async def registration_start(message: types.Message):
    await message.answer('–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel: \n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:')
    await Registration.fullname.set()


async def get_fullname(message: types.Message, state: FSMContext):
    fullname_check = message.text.strip().split()
    if len(fullname_check) < 2 or len(fullname_check) > 3:
        await message.answer('–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 3 —Å–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
    else:
        async with state.proxy() as data:
            data['fullname'] = message.text.strip().title()
        await message.answer(f'–í–∞—à–µ –§–ò–û: {data["fullname"]}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º, –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '
                             '–∫–æ—Ä–æ—Ç–∫–∏–º(–≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ) –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                             reply_markup=get_kb_back_cancel())
        await Registration.next()


async def get_shortname(message: types.Message, state: FSMContext):
    if await state_back(message, state, text='–í–≤–µ–¥–∏—Ç–µ –§–ò–û'):
        pass
    else:
        shortname_check = message.text.strip().split()
        if len(shortname_check) != 1:
            await message.answer('–ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ')
        else:
            async with state.proxy() as data:
                data['shortname'] = message.text.strip().title()
            await message.answer(f'–í–∞—à –ø—Å–µ–≤–¥–æ–Ω–∏–º: {data["shortname"]}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ',
                                 reply_markup=get_kb_back_skip_cancel())
            await Registration.next()


async def get_photo(message: types.Message, state: FSMContext):
    if await state_back(message, state, text='–í–≤–µ–¥–∏—Ç–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º'):
        pass
    else:
        if message.text == '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            await message.answer('–§–æ—Ç–æ (–Ω–µ—Ç), –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ',
                                 reply_markup=types.ReplyKeyboardRemove())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã: ', reply_markup=get_kb_groups())
            await Registration.next()
        else:
            if not message.photo:
                await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ, —Å–∂–∞—Ç—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')
            else:
                async with state.proxy() as data:
                    data['photo'] = message.photo[-1].file_id
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã: ', reply_markup=get_kb_groups())
                await Registration.next()


async def get_groups(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'post_done':
        keyboard = call.message.reply_markup['inline_keyboard']
        post_list = ", ".join(get_data_on_keyboard(keyboard))
        async with state.proxy() as data:
            data['groups'] = post_list
        await call.message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–Ω–∞! –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ /reg')
        await get_profile(message=call.message, state=state)
        await state.finish()
    elif call.data == 'post_back':
        await Registration.previous()
        await call.message.answer(f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', reply_markup=get_kb_back_skip_cancel())
    else:
        keyboard = call.message.reply_markup['inline_keyboard']
        new_keyboard = check_keyboard(keyboard, callback_data=call.data)
        await call.message.edit_text(text=call.message.text, reply_markup=new_keyboard)
    await call.answer()


def register_handler(dp: Dispatcher):
    dp.register_message_handler(registration_start, commands=['reg'])
    dp.register_message_handler(get_fullname, state=Registration.fullname)
    dp.register_message_handler(get_shortname, state=Registration.shortname)
    dp.register_message_handler(get_photo, content_types=['photo', 'text'], state=Registration.photo)
    dp.register_callback_query_handler(get_groups, Text(startswith='post'), state=Registration.groups)


async def state_back(message, state, text):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await message.answer(text)
        await Registration.previous()
        return True
    elif message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞')
        await state.finish()
        return True
    else:
        return False


async def get_profile(message: types.Message, state: FSMContext):
    # –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å, —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä–∫—É –∏–∑ –ë–î
    async with state.proxy() as data:
        text = ('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                f'ID: {message.chat.id}\n'
                f'–§–ò–û: {data["fullname"]}\n'
                f'–ü—Å–µ–≤–¥–æ–Ω–∏–º: {data["shortname"]}\n'
                f'–ì—Ä—É–ø–ø—ã: {data["groups"]}')
    try:
        await message.answer_photo(photo=data["photo"], caption=text)
    except:
        await message.answer(text)
