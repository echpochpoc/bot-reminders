from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext

from core.keyboards import keyboards
import datetime


class ReminderState(StatesGroup):
    text = State()
    time = State()
    date_send = State()
    date_last = State()
    date_delete = State()
    user = State()
    group = State()
    end_rem = State()


async def reminder_start(message: types.Message):
    await message.answer('–†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel')
    await ReminderState.text.set()


async def get_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text.strip())
    kb = keyboards.get_kb_back_cancel()
    await message.answer('–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=kb)
    await ReminderState.next()


async def get_time(message: types.Message, state: FSMContext):
    if await state_back(message, state, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç'):
        pass
    else:
        try:
            time = await check_time()
            await state.update_data(time=time)
            time_list = []
            for t in time:
                time_list.append("{}:{}".format(t.hour, t.minute))
            time_str = ', '.join(time_list)
            await message.answer(f'–í—Ä–µ–º—è: {time_str}, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
        except:
            message.answer('–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')


async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞')
    await state.finish()


def register_handler(dp: Dispatcher):
    dp.register_message_handler(reminder_start, commands=['start'])


async def state_back(message, state, text):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await message.answer(text)
        await ReminderState.previous()
        return True
    elif message.text == 'üö´ –û—Ç–º–µ–Ω–∞':
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞')
        await state.finish()
        return True
    else:
        return False


async def check_time(message_text):
    result = []
    list_str = message_text.split()
    for temp in list_str:
        time = datetime.datetime.strptime(f'{temp}', '%H%M')
        result.append(time)
    return result
