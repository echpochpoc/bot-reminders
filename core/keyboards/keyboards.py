import calendar
import locale
import re
import datetime

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, \
                          ReplyKeyboardMarkup, KeyboardButton
from db import models


def get_kb_back() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True)\
        .insert(KeyboardButton('‚¨ÖÔ∏è–ù–∞–∑–∞–¥'))
    return kb


def get_kb_yes_no() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True)\
        .add(KeyboardButton(text='üö´ –ù–µ—Ç'),
             KeyboardButton(text='‚úÖ –î–∞'))
    return kb


def get_kb_main_menu() -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton('üñä–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'),
        KeyboardButton('üì¨–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∞–º'),
        KeyboardButton('‚è∞–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è'),
        KeyboardButton('üåù–ü—Ä–æ—Ñ–∏–ª—å'),
        KeyboardButton('üÜò–ü–æ–º–æ—â—å'),
    )
    return kb


def get_inline_kb_reminder_done(reminder_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.insert(InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–∏—Ç—å',
                                   callback_data=f'rem_done_{reminder_id}'))
    return kb


def get_inline_kb_reminder_delete(reminder_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.insert(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',
                                   callback_data=f'rem_delete_{reminder_id}'))
    return kb


def get_inline_kb_reminder_details(reminder_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", —á—Ç–æ–± —É–∑–Ω–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """
    kb = InlineKeyboardMarkup()
    kb.insert(InlineKeyboardButton(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                                   callback_data=f'rem_detail_{reminder_id}'))
    return kb


def get_inline_kb_skip() -> InlineKeyboardMarkup:
    """
    –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –≤—Å–µ)
    """
    kb = InlineKeyboardMarkup().insert(
        InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                             callback_data='skip'))
    return kb


def edit_inline_kb(inline_kb: InlineKeyboardMarkup, call: str) -> InlineKeyboardMarkup:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Ç–º–µ—Ç–∫—É '‚úÖ', –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å - —É–±–∏—Ä–∞–µ—Ç
    """
    new_keyboard = InlineKeyboardMarkup()
    for row in inline_kb:
        new_row = []
        for button in row:
            button: dict
            if '‚úÖ' not in button["text"] and button["callback_data"] == call:
                button['text'] = f'‚úÖ{button["text"]}'
            elif '‚úÖ' in button['text'] and button['callback_data'] == call:
                button['text'] = button['text'].replace('‚úÖ', '')
            new_row.append(button)
        new_keyboard.row(*new_row)
    return new_keyboard


def get_text_on_buttons(inline_kb: InlineKeyboardMarkup) -> list[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–Ω–∞–∫ '‚úÖ'
    """
    result = []
    for row in inline_kb:
        for button in row:
            button: dict
            if '‚úÖ' in button['text']:
                result.append(button['text'].replace('‚úÖ', ''))
    return result


def get_data_on_keyboards(inline_kb: InlineKeyboardMarkup) -> list[int]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å —á–∏—Å–ª–∞–º–∏(id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö) –∏–∑ callback_data, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–Ω–∞–∫ '‚úÖ'
    """
    result = []
    for row in inline_kb:
        for button in row:
            button: dict
            if '‚úÖ' in button['text']:
                value = int(re.findall(r'\d+', button['callback_data'])[0])
                result.append(value)
    return result


def get_inline_kb_group_delete(group_id: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.insert(InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å',
                                   callback_data=f'delete_group_{group_id}'))
    return kb


def get_inline_kb_groups(groups: list[models.Group]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø
    """
    keyboard = InlineKeyboardMarkup()
    for group in groups:
        keyboard.insert(InlineKeyboardButton(text=group.title, callback_data=f'group_{group.id}'))
    keyboard.row(InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data=f'group_done'))
    return keyboard


def get_kb_calendar(year=int(datetime.datetime.now().year),
                    month=int(datetime.datetime.now().month)) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞—Ç—å –º–µ—Å—è—Ü—ã
    """
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    month_list = list(calendar.month_abbr)
    inline_kb = InlineKeyboardMarkup(row_width=7)
    inline_kb.row(InlineKeyboardButton("<<", callback_data=f'cal_month_prev_{month}_{year}'),
                  InlineKeyboardButton(f'{month_list[month]} {year}', callback_data='ignore'),
                  InlineKeyboardButton(">>", callback_data=f'cal_month_next_{month}_{year}'))
    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        inline_kb.row()
        for day in week:
            if day == 0:
                inline_kb.insert(
                    InlineKeyboardButton(" ", callback_data='ignore'))
                continue
            inline_kb.insert(
                InlineKeyboardButton(str(day), callback_data=f'cal_day_{day}_{month}_{year}'))
    inline_kb.insert(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f'cal_done'))
    return inline_kb


def get_inline_kb_days_week() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏,
    –≤ callback —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä –¥–Ω—è –≥–¥–µ 0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    """
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    inline_kb = InlineKeyboardMarkup()
    i = 0
    for day in calendar.day_abbr:
        inline_kb.insert(InlineKeyboardButton(text=day, callback_data=f'days_week_{i}'))
        i += 1
    inline_kb.insert(InlineKeyboardButton('–ì–æ—Ç–æ–≤–æ', callback_data=f'days_week_done'))
    return inline_kb


def get_clock(hour: int, minute: int) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    """
    this_time = datetime.time(hour=hour, minute=minute)
    str_hour = this_time.strftime('%H')
    str_minute = this_time.strftime('%M')
    inline_kb = InlineKeyboardMarkup(row_width=4)
    inline_kb.add(InlineKeyboardButton("‚è´", callback_data=f'clock_H_*+_{hour}_{minute}'),
                  InlineKeyboardButton("üîº", callback_data=f'clock_H_+_{hour}_{minute}'),
                  InlineKeyboardButton("‚è´", callback_data=f'clock_M_*+_{hour}_{minute}'),
                  InlineKeyboardButton("üîº", callback_data=f'clock_M_+_{hour}_{minute}'),)
    inline_kb.add(InlineKeyboardButton(f"{str_hour}", callback_data=f'ignore'),
                  InlineKeyboardButton(f"{str_minute}", callback_data=f'ignore'))
    inline_kb.add(InlineKeyboardButton("‚è¨", callback_data=f'clock_H_*-_{hour}_{minute}'),
                  InlineKeyboardButton("üîΩ", callback_data=f'clock_H_-_{hour}_{minute}'),
                  InlineKeyboardButton("‚è¨", callback_data=f'clock_M_*-_{hour}_{minute}'),
                  InlineKeyboardButton("üîΩ", callback_data=f'clock_M_-_{hour}_{minute}'))
    inline_kb.insert(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f'time_done_{hour}_{minute}'))
    return inline_kb


def get_inline_kb_users(users: list[models.User]) -> InlineKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    inline_kb = InlineKeyboardMarkup()
    for user in users:
        inline_kb.insert(InlineKeyboardButton(text=user.shortname, callback_data=f'user_{user.id}'))
    inline_kb.row(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data=f'user_done'))
    return inline_kb
